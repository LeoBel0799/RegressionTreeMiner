package tree;
import java.io.Serializable;

import data.Data;

//Estendendo la superclasse Node definire la classe LeafNode per modellare l'entità nodo fogliare
@SuppressWarnings("serial")
public class LeafNode extends Node implements Serializable{

	Double predictedClassValue; // valore dell'attributo di classe espresso nella foglia corrente
	
	public LeafNode (Data trainingSet, int beginExampleIndex, int endExampleIndex){
		
		/*
		 * Input: training set complessivo, indici estremi del sotto-insieme di training, coperto nella foglia
		Output:
		Comportamento: istanzia un oggetto invocando il costruttore della superclasse e avvalora l'attributo predictedClassValue (come media dei valori dell’attributo di classe
 		che ricadono nella partizione---ossia la porzione di trainingSet compresa tra beginExampelIndex e endExampelIndex )
		 */
		
		super (trainingSet,  beginExampleIndex,  endExampleIndex);
		Double sum = 0.0;
		Double mean = 0.0;
		
		for (int i=beginExampleIndex; i<=endExampleIndex; i++) {
			sum += trainingSet.getClassValue(i);
		}
		
		mean = sum/ (endExampleIndex - beginExampleIndex +1);
		predictedClassValue = mean;
	}
	
	
	public Double getPredictedClassValue() {		//Comportamento: restituisce il valore del membro predictedClassValue
		return predictedClassValue;
	}

	public int getNumberOfChildren() {		//Comportamento: restituisce il numero di split originanti dal nodo foglia, ovvero 0.
		return 0;
	}
	
	
	public String toString() {		//Comportamento:invoca il metodo della superclasse e assegnando anche il valore di classe della foglia.
		return "LEAF : class =" + predictedClassValue + "  " + super.toString();
	}

}




package tree;
import java.io.Serializable;

import data.Data;

/**
 * Classe astratta che modella l'astrazione dell'entità nodo dell'albero di
 * regressione.
 * 
 * 
 */

@SuppressWarnings("serial")
public abstract class Node implements Serializable {
	
	double sum= 0.0;
	double mean = 0.0;
	public static int idNodeCount=0; // contatore dei nodi generati nell'albero
	private int idNode; // identificativo numerico del nodo
	protected int beginExampleIndex; // indice nell'array del training set del primo esempio coperto dal nodo corrente
	protected int endExampleIndex; // indice nell'array del training set dell'ultimo //esempio coperto dal nodo corrente. beginExampleIndex e endExampleIndex individuano //un sotto-insieme di training.
	private double variance; // valore della varianza calcolata, rispetto all'attributo di classe, nel sotto-insieme di training del nodo
	
	/**
	 * Avvalora gli attributi primitivi di classe , inclusa la varianza che
	 * viene calcolata rispetto all'attributo di classe nel sotto-insieme di
	 * training coperto dal nodo.
	 * 
	 * @param trainingSet
	 *            Oggetto di classe Data contenente il training set completo.
	 * @param beginExampleIndex
	 *            Indice iniziale del sotto-insieme di training coperto dal nodo
	 *            corrente.
	 * @param endExampleIndex
	 *            Indice finale del sotto-insieme di training coperto dal nodo
	 *            corrente.
	 */
	
	public Node(Data trainingSet, int beginExampleIndex, int endExampleIndex){
		
		this.beginExampleIndex = beginExampleIndex;
		this.endExampleIndex = endExampleIndex;
		this.idNode = idNodeCount++;
		
		for (int i=beginExampleIndex; i<=endExampleIndex; i++) {
			sum += trainingSet.getClassValue(i);
		}
		
		mean = sum/ (this.endExampleIndex-beginExampleIndex+1);
		
		for (int i=beginExampleIndex; i<=endExampleIndex; i++) {
			variance += Math.pow((trainingSet.getClassValue(i) - mean), 2);
		}
	}
	
	
	/**
	 * Restituisce il valode del membro idNode.
	 * 
	 * @return Identificativo numerico del nodo.
	 */
	public int getIdNode(){			
		return idNode;
	}
	
	/**
	 * Restistuisce il valore del membro beginExampleIndex.
	 * 
	 * @return Indice del primo esempio nel sotto-insieme rispetto al training
	 *         set complessivo.
	 */
	
	public int getBeginExampleIndex(){		
		return beginExampleIndex;
	}
	
	
	/**
	 * Restistuisce il valore del membro endExampleIndex.
	 * 
	 * @return Indice dell'ultimo esempio nel sotto-insieme rispetto al training
	 *         set complessivo.
	 */
	public int getEndExampleIndex(){
		return endExampleIndex;
	}
	
	
	/**
	 * Restituise il valore del membro variance.
	 * 
	 * @return Valore della varianza rispetto al nodo corrente.
	 */
	public double getVariance(){			
		return variance;
	}	
	
	/**
	 * E' un metodo astratto la cui implementazione riguarda i nodi di tipo test
	 * (split node) dai quali si possono generare figli , uno per ogni split
	 * prodotto. Restituisce il numero di tali nodi figli.
	 * 
	 * @return Valore del numero di nodi sottostanti.
	 */
	abstract int getNumberOfChildren();		

	
	/**
	 * Concatena in un oggetto String i valori beginExampleIndex ,
	 * endExampleIndex e variance e restituisce la stringa finale.
	 */
	public String toString() {	
		String s;
		s= " Nodo: [Examples : " + getBeginExampleIndex() + " " + "-" + " " + getEndExampleIndex() + " ] " + "variance " + this.variance;
		return s;
	}
}

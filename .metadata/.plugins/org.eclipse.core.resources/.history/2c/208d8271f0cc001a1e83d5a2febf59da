package server;


import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.net.SocketException;
import java.sql.SQLException;

import data.Data;
import data.TrainingDataException;
import tree.RegressionTree;
import server.UnknownValueException;


public class ServerOneClient extends Thread {
	

	private Socket socket;
	private ObjectInputStream in;
	private ObjectOutputStream out;

	
	/**
	 *Inizializza gli attributi socket, in e out. Avvia il thread.
	 *
	 * @param s socket
	 * @throws IOException problemi nella creazione degli stream.
	 */
	
	public ServerOneClient(final Socket s) throws IOException {
		socket = s;
		out = new ObjectOutputStream(socket.getOutputStream());
		in = new ObjectInputStream(socket.getInputStream());
		start();
	}

	
	/**
	 * Riscrive il metodo run della superclasse Thread al fine di gestire le richieste del client in
	 * modo da rispondere alle richieste del client
	 */
	@Override
    public void run() {
        System.out.println("Connection accepted!");

        RegressionTree tree = null;
        Data trainingSet = null;
        Integer decision = null;
        String tableName = null;

        try{
            decision = Integer.parseInt(in.readObject().toString());
            tableName = in.readObject().toString();

            if (decision.equals(0)) {
                try {
					trainingSet = new Data(tableName);
				} catch (InstantiationException | IllegalAccessException | SQLException e) {
					e.printStackTrace();
				} //leggo da DB
                out.writeObject("OK");
                Integer.parseInt(in.readObject().toString()); //Proceed with learning
                tree = new RegressionTree(trainingSet);
                tree.salva(tableName + ".dmp");
            } else {
                tree = RegressionTree.carica(tableName + ".dmp"); //leggo da file
            }

            out.writeObject("OK");

            tree.printRules();

            do {
                tree.printRules();
                Integer.parseInt(in.readObject().toString()); //Proceed with prediction phase
                tree.predictClass(out, in);
            } while (true);
        }catch (SocketException e){
            System.out.println("Client aborted connection.");
        }catch (IOException | TrainingDataException | UnknownValueException | ClassNotFoundException e) {
            try {
                ((Throwable) e).printStackTrace();
                out.writeObject(((Throwable) e).getMessage() + "\nAborting");
            } catch (IOException ioException) {
                System.out.println(ioException.getMessage());
            }

  
            try {
    			in.close();
    			out.close();
    			socket.close();
    		} catch (IOException e1) {
    			 System.out.println(e1.getMessage());
    		}

        }
	}
}
